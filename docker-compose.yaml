version: '3'

services:
  mongodb:
    container_name: mongodb-container
    image: mongo:latest
    volumes:
      - mongodb-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - custom-network
    restart: always

  scraper:
    container_name: scraper-container
    image: big_data_tfm-scraper
    build:
      context: ./ingestion_scrapper
      dockerfile: Dockerfile
    volumes:
      - logs:/usr/src/app/logs
    networks:
      - custom-network
    depends_on:
      - mongodb

  etl:
    container_name: etl-container
    image: big_data_tfm-etl
    build:
      context: ./ETL
      dockerfile: Dockerfile
    volumes:
      - logs:/usr/src/app/logs
      - sqlite-db:/usr/src/app/database
    networks:
      - custom-network
    depends_on:
      - mongodb

  data_analysis:
    container_name: ml-container
    image: big_data_tfm-data_analysis
    build:
      context: ./data_analysis
      dockerfile: Dockerfile
    volumes:
      - logs:/usr/src/app/logs
      - sqlite-db:/usr/src/app/database
      - ml-models:/usr/src/app/models
    networks:
      - custom-network

  airflow_webserver:
    container_name: airflow-webserver-container
    image: apache/airflow:2.7.1
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW_UID=${UID:-50000}
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-data:/opt/airflow
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
      - /tmp:/tmp  # Mount /tmp directory
    command: webserver
    networks:
      - custom-network
    depends_on:
      - mongodb
    restart: always

  airflow_scheduler:
    container_name: airflow-scheduler-container
    image: apache/airflow:2.7.1
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW_UID=${UID:-50000}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-data:/opt/airflow
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket
      - /tmp:/tmp  # Mount /tmp directory
    command: scheduler
    networks:
      - custom-network
    depends_on:
      - mongodb
    restart: always

  app:
    container_name: app-container
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - web-network
    depends_on:
      - backend
    restart: always
  
  backend:
    container_name: backend-container
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - sqlite-db:/usr/src/app/database
    networks:
      - web-network
    restart: always

  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot-etc:/etc/letsencrypt  # Use the Docker-managed volume for SSL certificates
      - webroot:/var/www/certbot 
    ports:
      - "80:80"
      - "443:443" 
    container_name: reverse-proxy
    depends_on:
      - app 
      - backend
    networks:
      - web-network
    restart: always

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - certbot-log:/var/log/letsencrypt
      - webroot:/var/www/certbot
    command: >
      certonly --webroot --webroot-path=/var/www/certbot
      -d buscahogar.es -d www.buscahogar.es
      --email dpuerta@usal.es --agree-tos --no-eff-email
    networks:
      - web-network
    restart: always

volumes:
  mongodb-data:
  logs:
  sqlite-db:
  ml-models:
  airflow-logs:
  airflow-data:
  certbot-etc:
  certbot-var:
  certbot-log:
  webroot: 

networks:
  custom-network:
    driver: bridge
  web-network:
    driver: bridge


